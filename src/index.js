const MORSE_TABLE = {
    '.-': 'a',
    '-...': 'b',
    '-.-.': 'c',
    '-..': 'd',
    '.': 'e',
    '..-.': 'f',
    '--.': 'g',
    '....': 'h',
    '..': 'i',
    '.---': 'j',
    '-.-': 'k',
    '.-..': 'l',
    '--': 'm',
    '-.': 'n',
    '---': 'o',
    '.--.': 'p',
    '--.-': 'q',
    '.-.': 'r',
    '...': 's',
    '-': 't',
    '..-': 'u',
    '...-': 'v',
    '.--': 'w',
    '-..-': 'x',
    '-.--': 'y',
    '--..': 'z',
    '.----': '1',
    '..---': '2',
    '...--': '3',
    '....-': '4',
    '.....': '5',
    '-....': '6',
    '--...': '7',
    '---..': '8',
    '----.': '9',
    '-----': '0',
};


function decode(expr) {
    let result = [];
    // write your solution here
    for (let i = 0; i < expr.length; i += 10) {
        result.push(expr.slice(i, i + 10).split(''));
    }

    result = result.map((elem) => {
            console.log(typeof elem)
            return elem.map((el) => el === '0' ? el = ' ' : el).join('').trimStart().split('')
        }

    )

    result = result.map((elem) => {
        for (let i = 0; i < elem.length; i += 2) {

            if (elem[i] === '1' && elem[i + 1] === '1') {

                elem[i] = '-';
                elem[i + 1] = '';

            } else if (elem[i] === '1' && elem[i + 1] === ' ') {
                elem[i] = '.';
                elem[i + 1] = '';

            } else if (elem[i] === '*') {
                elem = [' '];
            }


        }
        return elem.join('')
    })
    result = result.map((elem) => {
        if (elem in MORSE_TABLE) {
            elem = MORSE_TABLE[elem];


        }

        return elem;
    })

    return result.join('');
}
module.exports = {
        decode
    }
    // let num = "000000101100000011100000101010000010111100000000100000101110**********00001111110000001110**********000000001100101010100000000010**********00001010110010111010000000001100000010100000001111000000101100000000110000000010**********00111110110000101011000000001000001010100000000011000000101000001111110000001110**********00001111110010101110**********0010111010000000101000101011100000000010**********000000001100101010100000000010**********00001010110000001110000000101000101010110000000010000010111000001010100000000010**********000000101100000011100000111010**********0000000010001010101100000000100000101110001110111100000000110010101010000000101000000011100000111110**********00000010100000101010**********10101010111010111111";